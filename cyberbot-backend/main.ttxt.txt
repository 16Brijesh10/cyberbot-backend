#main.py
import streamlit as st
import sqlite3
from datetime import datetime, date
from gemini_query import query_gemini, save_to_db, load_history_by_date
from vector_db import retrieve_docs,initialize_vector_db

# Streamlit UI setup
st.set_page_config(page_title="Company AI Chatbot", page_icon="🤖", layout="wide")

# Initialize chat history
if "messages" not in st.session_state:
    st.session_state.messages = []
    
if "vector_db" not in st.session_state:
    st.session_state.vector_db = initialize_vector_db()

#Sidebar: Select Date for Past Chats
with st.sidebar:
    st.header("Chat History")
    st.header("📅 SELECT DATE")
    selected_date = st.date_input("Select a date to view chat history", value=date.today())

    if st.button("Load Chat History"):
        past_conversations = load_history_by_date(selected_date.strftime("%Y-%m-%d"))
        
        if past_conversations:
            st.session_state.messages = [
                {"role": "user", "content": q} if i % 2 == 0 else {"role": "assistant", "content": a}
                for i, (q, a) in enumerate(past_conversations)
            ]
            st.success("✅ Chat history loaded!")
        else:
            st.warning("⚠️ No chat history found for this date.")

    if st.button("🗑 Clear Chat"):
        st.session_state.messages = []
        st.success("✅ Chat cleared!")
        st.rerun()

#Chat Title
st.title("⚙️ COMPANY AI Chatbot 🤖")
st.markdown(
    """
    <style>
    .big-font { font-size: 25Px !important; }
    </style>
    """,
    unsafe_allow_html=True
)

#Display chat history using sqlite3
for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        #st.write(msg["content"])
         st.markdown(f'<p class="big-font">{msg["content"]}</p>', unsafe_allow_html=True)

#Getting user Input
query = st.chat_input("Ask about the company...")
if query:
    st.session_state.messages.append({"role": "user", "content": query})
    
    with st.chat_message("user"):
        st.markdown(f'<p class="big-font">{query}</p>', unsafe_allow_html=True)

    # Retrieve relevant docuemts
    retrieved_docs = retrieve_docs(query, st.session_state.vector_db)

    # get Query from the gemini
    with st.spinner("🤖 Thinking..."):
        answer = query_gemini(query, retrieved_docs)
    
    # Adjust font size for bullet points (increased viisbility especially for bullet points)
    formatted_answer = answer.replace("\n-", "\n\n- **").replace("\n", "\n\n")

    # Ai respone got stored
    st.session_state.messages.append({"role": "assistant", "content": formatted_answer})
    
    with st.chat_message("assistant"):
        st.markdown(f"<div style='font-size:25px;'>{formatted_answer}</div>", unsafe_allow_html=True)

    # Save the meesages to db
    save_to_db(query, answer)